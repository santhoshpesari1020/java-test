pipeline {

    agent any

    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
    }
 parameters {
 booleanParam (name: 'XRAY_SCAN', defaultValue: false, description: 'Scan artifacts using Xray')
 booleanParam (name: 'FAIL_BUILD', defaultValue: false, description: 'Fail build if any violation is found in Xray')
    }
    stages {
        stage('gradle clean build') {
            agent {
                docker {
                    image 'gradle:4.7-jdk8-alpine'
                    reuseNode true
                }
            }

            steps {
                script {
                    sh 'gradle clean'
                    sh 'gradle :demo-api:build'
                    sh 'gradle :demo-client:build'
                }
            }
        }

        stage('publish') {
            steps {
                script {
                    def jarServer = Artifactory.newServer url: 'http://10.138.0.3:12025/artifactory/'
                    jarServer.username = 'admin'
                    jarServer.password = 'password'
                    def rtGradle = Artifactory.newGradleBuild()

                    rtGradle.usesPlugin = true
                    rtGradle.tool = 'gradle'
                    rtGradle.resolver server: jarServer, repo: 'gradle-dev-local'
                    rtGradle.deployer server: jarServer, repo: 'gradle-release-local'
                    rtGradle.deployer.deployMavenDescriptors = true
                    rtGradle.deployer.deployIvyDescriptors = false

                    rtGradle.run rootDir: "./", buildFile: 'build.gradle', tasks: 'clean artifactoryPublish'
                    def buildInfo1 = rtGradle.run rootDir: "./", buildFile: 'build.gradle', tasks: ':demo-api:artifactoryPublish :demo-client:artifactoryPublish'
                    def buildInfo2 = rtGradle.run rootDir: "./", buildFile: 'build.gradle', tasks: ':demo-impl:artifactoryPublish'
                    jarServer.publishBuildInfo buildInfo1
                    jarServer.publishBuildInfo buildInfo2
                }
            }
        }

    }

}    
 stage('Xray Scan'){
            when {
                expression { return params.XRAY_SCAN }
            }         
  steps {
                script {
                    xrayConfig = [
                        'buildName'     : buildInfo.name,
                        'buildNumber'    : buildInfo.number,
                        'failBuild'     : "${params.FAIL_BUILD}".toBoolean()
                    ]
                    xrayResults = rtServer.xrayScan xrayConfig
                    echo xrayResults as String
                }
            }
        }
    }
